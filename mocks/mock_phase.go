// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jonathan-buttner/game-framework/internal/phase (interfaces: PhaseHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	phase "github.com/jonathan-buttner/game-framework/internal/phase"
	player "github.com/jonathan-buttner/game-framework/internal/player"
)

// MockPhaseHandler is a mock of PhaseHandler interface.
type MockPhaseHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPhaseHandlerMockRecorder
}

// MockPhaseHandlerMockRecorder is the mock recorder for MockPhaseHandler.
type MockPhaseHandlerMockRecorder struct {
	mock *MockPhaseHandler
}

// NewMockPhaseHandler creates a new mock instance.
func NewMockPhaseHandler(ctrl *gomock.Controller) *MockPhaseHandler {
	mock := &MockPhaseHandler{ctrl: ctrl}
	mock.recorder = &MockPhaseHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhaseHandler) EXPECT() *MockPhaseHandlerMockRecorder {
	return m.recorder
}

// CurrentPlayer mocks base method.
func (m *MockPhaseHandler) CurrentPlayer() *player.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentPlayer")
	ret0, _ := ret[0].(*player.Player)
	return ret0
}

// CurrentPlayer indicates an expected call of CurrentPlayer.
func (mr *MockPhaseHandlerMockRecorder) CurrentPlayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentPlayer", reflect.TypeOf((*MockPhaseHandler)(nil).CurrentPlayer))
}

// NextPlayer mocks base method.
func (m *MockPhaseHandler) NextPlayer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NextPlayer")
}

// NextPlayer indicates an expected call of NextPlayer.
func (mr *MockPhaseHandlerMockRecorder) NextPlayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPlayer", reflect.TypeOf((*MockPhaseHandler)(nil).NextPlayer))
}

// SetStep mocks base method.
func (m *MockPhaseHandler) SetStep(arg0 phase.Step) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStep", arg0)
}

// SetStep indicates an expected call of SetStep.
func (mr *MockPhaseHandlerMockRecorder) SetStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStep", reflect.TypeOf((*MockPhaseHandler)(nil).SetStep), arg0)
}
