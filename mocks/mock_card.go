// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jonathan-buttner/game-framework/internal/deck (interfaces: Card,OrientationActions)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	deck "github.com/jonathan-buttner/game-framework/internal/deck"
	resource "github.com/jonathan-buttner/game-framework/internal/resource"
)

// MockCard is a mock of Card interface.
type MockCard struct {
	ctrl     *gomock.Controller
	recorder *MockCardMockRecorder
}

// MockCardMockRecorder is the mock recorder for MockCard.
type MockCardMockRecorder struct {
	mock *MockCard
}

// NewMockCard creates a new mock instance.
func NewMockCard(ctrl *gomock.Controller) *MockCard {
	mock := &MockCard{ctrl: ctrl}
	mock.recorder = &MockCardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCard) EXPECT() *MockCardMockRecorder {
	return m.recorder
}

// GetOrientationActions mocks base method.
func (m *MockCard) GetOrientationActions(arg0 deck.CardOrientation) deck.OrientationActions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrientationActions", arg0)
	ret0, _ := ret[0].(deck.OrientationActions)
	return ret0
}

// GetOrientationActions indicates an expected call of GetOrientationActions.
func (mr *MockCardMockRecorder) GetOrientationActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrientationActions", reflect.TypeOf((*MockCard)(nil).GetOrientationActions), arg0)
}

// ID mocks base method.
func (m *MockCard) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockCardMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCard)(nil).ID))
}

// MockOrientationActions is a mock of OrientationActions interface.
type MockOrientationActions struct {
	ctrl     *gomock.Controller
	recorder *MockOrientationActionsMockRecorder
}

// MockOrientationActionsMockRecorder is the mock recorder for MockOrientationActions.
type MockOrientationActionsMockRecorder struct {
	mock *MockOrientationActions
}

// NewMockOrientationActions creates a new mock instance.
func NewMockOrientationActions(ctrl *gomock.Controller) *MockOrientationActions {
	mock := &MockOrientationActions{ctrl: ctrl}
	mock.recorder = &MockOrientationActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrientationActions) EXPECT() *MockOrientationActionsMockRecorder {
	return m.recorder
}

// Cost mocks base method.
func (m *MockOrientationActions) Cost() resource.GroupedResources {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cost")
	ret0, _ := ret[0].(resource.GroupedResources)
	return ret0
}

// Cost indicates an expected call of Cost.
func (mr *MockOrientationActionsMockRecorder) Cost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cost", reflect.TypeOf((*MockOrientationActions)(nil).Cost))
}

// IsOrientationValid mocks base method.
func (m *MockOrientationActions) IsOrientationValid(arg0 deck.Game) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrientationValid", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOrientationValid indicates an expected call of IsOrientationValid.
func (mr *MockOrientationActionsMockRecorder) IsOrientationValid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrientationValid", reflect.TypeOf((*MockOrientationActions)(nil).IsOrientationValid), arg0)
}

// PerformPlayToTableaAction mocks base method.
func (m *MockOrientationActions) PerformPlayToTableaAction(arg0 deck.Game) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PerformPlayToTableaAction", arg0)
}

// PerformPlayToTableaAction indicates an expected call of PerformPlayToTableaAction.
func (mr *MockOrientationActionsMockRecorder) PerformPlayToTableaAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformPlayToTableaAction", reflect.TypeOf((*MockOrientationActions)(nil).PerformPlayToTableaAction), arg0)
}

// PerformUseResourceAction mocks base method.
func (m *MockOrientationActions) PerformUseResourceAction(arg0 deck.Game) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PerformUseResourceAction", arg0)
}

// PerformUseResourceAction indicates an expected call of PerformUseResourceAction.
func (mr *MockOrientationActionsMockRecorder) PerformUseResourceAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformUseResourceAction", reflect.TypeOf((*MockOrientationActions)(nil).PerformUseResourceAction), arg0)
}
